/* The following code was generated by JFlex 1.6.1 */

package compiler.generated;

import java_cup.runtime.*;
import compiler.core.JavaSymbol;

/**
 * Lexical Specification
 *
 * @author Isabelly Cavalcante, Remy De Fru, Anderson Gustafson (2016.1)
 */
 

public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\4\1\0\1\5\1\3\22\0\1\6\1\25\1\17"+
    "\1\30\1\30\1\31\1\32\1\20\1\37\1\40\1\21\1\22\1\100"+
    "\1\16\1\14\1\53\1\7\7\12\2\2\1\36\1\77\1\101\1\33"+
    "\1\102\1\34\1\30\2\11\1\50\1\11\1\15\1\13\14\1\1\42"+
    "\4\1\1\10\2\1\1\23\1\0\1\24\1\35\1\1\1\0\1\54"+
    "\1\55\1\57\1\65\1\52\1\66\1\47\1\63\1\45\1\1\1\61"+
    "\1\60\1\67\1\46\1\51\1\71\1\1\1\44\1\56\1\43\1\64"+
    "\1\72\1\73\1\70\1\62\1\74\1\75\1\104\1\76\1\103\44\0"+
    "\1\27\14\0\1\27\21\0\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff4d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\3\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\6\2"+
    "\1\25\12\2\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\0\1\37\1\40\1\0"+
    "\1\41\1\42\6\0\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\4\2\1\54\10\2\1\0"+
    "\1\55\1\4\17\2\1\56\12\2\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\37\1\0\1\65\3\0\1\2"+
    "\1\66\4\2\1\67\2\2\1\70\6\2\1\0\23\2"+
    "\1\71\11\2\1\72\1\73\1\74\3\0\1\2\1\75"+
    "\2\2\1\76\6\2\1\77\1\100\1\101\1\102\5\2"+
    "\1\103\10\2\1\104\1\2\1\105\1\106\11\2\1\107"+
    "\2\2\1\110\2\0\1\2\1\111\12\2\1\112\3\2"+
    "\1\113\1\114\2\2\1\115\1\116\1\117\2\2\1\120"+
    "\1\121\1\122\5\2\1\123\2\0\1\2\1\124\1\2"+
    "\1\125\2\2\1\126\1\2\1\127\2\2\1\130\1\2"+
    "\1\131\1\2\1\132\1\2\1\133\5\2\1\134\1\2"+
    "\2\0\5\2\1\135\1\2\1\136\2\2\1\137\1\140"+
    "\1\141\1\2\1\142\1\2\2\0\5\2\1\143\1\2"+
    "\1\144\1\2\1\145\2\0\1\146\1\2\1\147\3\2"+
    "\1\150\2\0\1\151\1\152\1\153\1\2\2\0\1\2"+
    "\2\0\1\154\5\0\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\105\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u0228\0\u026d\0\u02b2\0\105\0\105\0\u02f7"+
    "\0\u033c\0\u0381\0\u03c6\0\105\0\u040b\0\105\0\105\0\105"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\105\0\105\0\105\0\105\0\u08e5\0\u092a\0\105"+
    "\0\u096f\0\105\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\105"+
    "\0\105\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\212\0\u0dbf\0\u0e04\0\u0e49"+
    "\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\105\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\105\0\u1773\0\105\0\u17b8\0\105\0\105"+
    "\0\u17fd\0\u1842\0\u0ac8\0\u1887\0\u18cc\0\u1911\0\u1956\0\212"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\212"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\212\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\105\0\105\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\212\0\u2646\0\u268b\0\212\0\u26d0"+
    "\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\212\0\212\0\212"+
    "\0\212\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\212\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\212"+
    "\0\u2bef\0\212\0\212\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48"+
    "\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\212\0\u2ea1\0\u2ee6\0\105"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\212\0\u32f1"+
    "\0\u3336\0\u337b\0\212\0\212\0\u33c0\0\u3405\0\212\0\212"+
    "\0\212\0\u344a\0\u348f\0\u34d4\0\212\0\212\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\212\0\u3672\0\u36b7\0\u36fc\0\212"+
    "\0\u3741\0\212\0\u3786\0\u37cb\0\212\0\u3810\0\212\0\u3855"+
    "\0\u389a\0\212\0\u38df\0\212\0\u3924\0\212\0\u3969\0\212"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\212\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\212\0\u3d2f"+
    "\0\212\0\u3d74\0\u3db9\0\212\0\212\0\212\0\u3dfe\0\212"+
    "\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\212\0\u406b\0\212\0\u40b0\0\212\0\u40f5\0\u413a\0\212"+
    "\0\u417f\0\212\0\u41c4\0\u4209\0\u424e\0\212\0\u4293\0\u42d8"+
    "\0\212\0\212\0\212\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431"+
    "\0\u4476\0\212\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\6\1\7\2\3\1\4"+
    "\1\3\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\3\2\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\6\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\2\3\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\4\3\1\45\1\46\2\3\1\47"+
    "\1\50\1\51\1\3\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\106\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\21\3\12\0\1\4\4\0"+
    "\1\4\2\0\1\4\1\62\1\63\1\64\34\0\1\64"+
    "\13\0\1\62\22\0\1\6\102\0\1\65\4\0\1\66"+
    "\1\67\1\0\1\66\1\62\1\63\1\64\34\0\1\64"+
    "\13\0\1\62\1\0\1\67\16\0\1\63\4\0\1\63"+
    "\2\0\1\63\110\0\1\70\14\0\1\71\52\0\2\72"+
    "\1\73\1\74\1\0\6\72\1\0\1\72\1\75\2\0"+
    "\5\75\1\76\1\0\11\75\1\0\1\77\10\72\1\0"+
    "\21\72\43\0\1\100\73\0\1\101\10\0\1\102\104\0"+
    "\1\103\104\0\1\104\103\0\1\105\1\106\104\0\1\107"+
    "\104\0\1\110\52\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\2\3\1\111\6\3\1\0\7\3\1\112\11\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\113\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\4\3\1\114\4\3\1\0\12\3\1\115"+
    "\1\116\5\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\10\3\1\117\1\0\1\120\7\3\1\121\10\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\7\3"+
    "\1\122\1\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\4\3\1\123\4\3\1\0\4\3"+
    "\1\124\7\3\1\125\4\3\31\0\1\126\11\0\1\127"+
    "\17\0\1\130\32\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\1\3\1\131\1\132\16\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\2\3\1\133"+
    "\4\3\1\134\1\3\1\0\6\3\1\135\12\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\136"+
    "\7\3\1\0\6\3\1\137\1\140\1\141\6\3\1\142"+
    "\1\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\7\3\1\143\1\3\1\0\1\144\3\3\1\145\2\3"+
    "\1\146\11\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\7\3\1\147\1\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\7\3\1\150\1\151"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\3\3\1\152\3\3\1\153\1\3\1\0\1\154"+
    "\3\3\1\155\14\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\2\3\1\156\6\3\1\0\1\157\7\3"+
    "\1\160\10\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\7\3\1\161\1\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\7\3"+
    "\1\162\11\3\43\0\1\163\45\0\1\164\36\0\1\165"+
    "\46\0\1\166\35\0\1\167\50\0\1\170\2\0\1\63"+
    "\4\0\1\63\2\0\1\63\1\62\1\0\1\64\34\0"+
    "\1\64\13\0\1\62\20\0\1\171\4\0\1\171\2\0"+
    "\1\171\3\0\1\172\3\0\1\172\64\0\1\65\4\0"+
    "\1\65\2\0\1\65\1\62\1\63\1\64\34\0\1\64"+
    "\13\0\1\62\20\0\1\65\4\0\1\66\2\0\1\66"+
    "\1\62\1\63\1\64\34\0\1\64\13\0\1\62\20\0"+
    "\1\173\4\0\1\173\1\0\3\173\1\0\1\173\32\0"+
    "\1\173\1\0\1\173\1\0\2\173\1\0\1\173\5\0"+
    "\2\173\17\0\2\72\3\0\6\72\1\0\1\72\24\0"+
    "\1\77\10\72\1\0\21\72\13\0\1\73\1\174\35\0"+
    "\1\175\45\0\1\73\1\74\35\0\1\175\60\0\1\75"+
    "\2\0\5\75\1\76\1\0\11\75\1\0\1\175\71\0"+
    "\1\75\56\0\2\72\3\0\6\72\1\0\1\72\24\0"+
    "\1\77\1\176\7\72\1\0\21\72\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\1\177\5\3"+
    "\1\200\1\3\1\201\10\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\2\3\1\202\1\203\5\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\1\3\1\204\7\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\1\3\1\205\7\3\1\0"+
    "\2\3\1\206\16\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\15\3\1\207\3\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\17\3\1\210\1\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\211\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\4\3\1\212\14\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\213\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\10\3\1\214\10\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\2\3\1\215\16\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\216"+
    "\7\3\1\0\21\3\10\0\21\126\1\217\63\126\3\130"+
    "\1\5\1\6\100\130\1\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\2\3\1\220\16\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\2\3\1\221\16\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\10\3\1\222\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\7\3\1\223\1\3"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\1\3\1\224\7\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\1\225"+
    "\20\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\4\3\1\226\4\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\7\3\1\227\1\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\15\3\1\230\3\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\3\3\1\231\5\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\4\3\1\232\4\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\1\3\1\233\7\3\1\0"+
    "\2\3\1\234\16\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\1\235\20\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\1\236"+
    "\20\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\4\3\1\237\4\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\10\3\1\240"+
    "\10\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\12\3\1\241\6\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\4\3\1\242\4\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\2\3\1\243\6\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\4\3\1\244"+
    "\14\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\7\3\1\245\1\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\3\3\1\246\3\3\1\247"+
    "\1\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\3\3\1\250\15\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\1\3\1\251\17\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\3\3\1\252\5\3\1\0\4\3\1\253"+
    "\14\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\3\3\1\254\5\3\1\0\21\3\43\0\1\255\104\0"+
    "\1\256\46\0\1\257\4\0\1\171\4\0\1\171\2\0"+
    "\1\171\1\62\52\0\1\62\20\0\1\171\4\0\1\171"+
    "\2\0\1\171\75\0\1\73\1\74\34\0\1\260\1\175"+
    "\105\0\1\261\42\0\2\72\3\0\6\72\1\0\1\72"+
    "\24\0\1\77\1\72\1\262\6\72\1\0\21\72\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\4\3\1\263"+
    "\4\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\10\3\1\264\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\7\3\1\265\1\266"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\2\3\1\267\16\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\10\3"+
    "\1\270\10\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\10\3\1\271\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\1\3\1\272\7\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\7\3\1\273\1\3\1\0\4\3\1\274\14\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\3\3\1\275"+
    "\5\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\4\3\1\276\14\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\7\3\1\277"+
    "\1\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\13\3\1\300\5\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\10\3\1\301"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\10\3\1\302\1\0\21\3\10\0\21\126\1\217"+
    "\31\126\1\6\31\126\1\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\303\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\10\3\1\304"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\1\305\20\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\4\3\1\306"+
    "\14\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\10\3\1\307\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\1\3\1\310\7\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\11\3"+
    "\1\0\3\3\1\311\15\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\2\3\1\312\6\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\313\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\314\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\315"+
    "\7\3\1\0\2\3\1\316\16\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\3\3\1\317"+
    "\15\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\10\3\1\320\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\2\3\1\321\16\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\2\3"+
    "\1\322\6\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\5\3\1\323\3\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\11\3"+
    "\1\0\1\3\1\324\17\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\1\325\20\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\1\326\20\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\2\3\1\327\16\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\1\330"+
    "\20\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\16\3\1\331\2\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\1\3\1\332\7\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\5\3\1\333\13\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\4\3\1\334"+
    "\14\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\11\3\1\335\7\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\1\336\20\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\11\3"+
    "\1\0\4\3\1\337\14\3\43\0\1\340\56\0\1\74"+
    "\143\0\1\341\41\0\2\72\3\0\6\72\1\0\1\72"+
    "\24\0\1\77\2\72\1\342\5\72\1\0\21\72\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\2\3\1\343\16\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\17\3\1\344\1\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\1\345\20\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\2\3\1\346\6\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\2\3\1\347\6\3"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\1\350\20\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\2\3\1\351\6\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\10\3\1\352\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\16\3\1\353\2\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\4\3"+
    "\1\354\4\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\2\3\1\355\6\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\2\3"+
    "\1\356\6\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\5\3\1\357\13\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\360\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\3\3\1\361\5\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\7\3\1\362\11\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\363\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\2\3\1\364"+
    "\6\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\3\3\1\365\15\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\3\3\1\366"+
    "\5\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\1\3\1\367\7\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\7\3\1\370\11\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\2\3\1\371\16\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\4\3\1\372\14\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\10\3\1\373\10\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\4\3\1\374\14\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\10\3\1\375\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\1\3\1\376\7\3"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\1\377\20\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\10\3\1\u0100\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\11\3"+
    "\1\0\1\u0101\20\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\3\3\1\u0102\5\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\u0103"+
    "\7\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\10\3\1\u0104\1\0\21\3\55\0\1\u0105"+
    "\40\0\2\72\3\0\6\72\1\0\1\72\24\0\1\77"+
    "\3\72\1\u0106\4\72\1\0\21\72\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\3\3\1\u0107\5\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\2\3\1\u0108\16\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\11\3\1\u0109"+
    "\7\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\4\3\1\u010a\4\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\12\3\1\u010b"+
    "\6\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\4\3\1\u010c\4\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\1\3\1\u010d\7\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\13\3\1\u010e\5\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\10\3\1\u010f\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\11\3"+
    "\1\0\11\3\1\u0110\7\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\1\u0111\20\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\u0112"+
    "\7\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\1\u0113\20\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\3\3"+
    "\1\u0114\15\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\2\3\1\u0115\6\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\7\3"+
    "\1\u0116\11\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\4\3\1\u0117\4\3\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\10\3\1\u0118\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\4\3\1\u0119\14\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\4\3\1\u011a"+
    "\14\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\1\3\1\u011b\7\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\3\3\1\u011c"+
    "\15\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\5\3\1\u011d\3\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\3\3\1\u011e"+
    "\15\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\3\3\1\u011f\5\3\1\0\21\3\56\0\1\u0120\37\0"+
    "\2\72\3\0\6\72\1\0\1\72\24\0\1\77\4\72"+
    "\1\u0121\3\72\1\0\21\72\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\10\3\1\u0122\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\2\3\1\u0123\16\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\1\u0124\20\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\11\3\1\0\3\3"+
    "\1\u0125\15\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\10\3\1\u0126\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\2\3\1\u0127"+
    "\16\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\3\3\1\u0128\15\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\4\3\1\u0129\4\3\1\0"+
    "\21\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\7\3\1\u012a\1\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\10\3\1\u012b"+
    "\10\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\1\3\1\u012c\7\3\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\6\3\1\u012d"+
    "\12\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\10\3\1\u012e\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\1\3\1\u012f\7\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\u0130\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\11\3\1\0\4\3\1\u0131\14\3\57\0"+
    "\1\u0132\36\0\2\72\3\0\6\72\1\0\1\72\24\0"+
    "\1\77\5\72\1\u0133\2\72\1\0\21\72\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\4\3\1\u0134\4\3"+
    "\1\0\21\3\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\11\3\1\0\1\u0135\20\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\3\3\1\u0136"+
    "\15\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\10\3\1\u0137\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\4\3\1\u0138\4\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\1\3"+
    "\1\u0139\7\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\4\3\1\u013a\4\3\1\0\21\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\u013b\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\10\3\1\u013c\1\0\21\3\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\10\3\1\u013d\1\0"+
    "\21\3\60\0\1\u013e\35\0\2\72\3\0\6\72\1\0"+
    "\1\72\24\0\1\77\6\72\1\u013f\1\72\1\0\21\72"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\1\3"+
    "\1\u0140\7\3\1\0\21\3\11\0\2\3\3\0\6\3"+
    "\1\0\1\3\24\0\11\3\1\0\12\3\1\u0141\6\3"+
    "\11\0\2\3\3\0\6\3\1\0\1\3\24\0\10\3"+
    "\1\u0142\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\7\3\1\u0143\1\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\1\3\1\u0144"+
    "\7\3\1\0\21\3\11\0\2\3\3\0\6\3\1\0"+
    "\1\3\24\0\3\3\1\u0145\5\3\1\0\21\3\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\11\3\1\u0146\7\3\61\0\1\u0147\34\0\2\72\3\0"+
    "\6\72\1\0\1\72\24\0\1\77\3\72\1\u0148\4\72"+
    "\1\0\21\72\11\0\2\3\3\0\6\3\1\0\1\3"+
    "\24\0\10\3\1\u0149\1\0\21\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\12\3\1\u014a"+
    "\6\3\11\0\2\3\3\0\6\3\1\0\1\3\24\0"+
    "\11\3\1\0\2\3\1\u014b\16\3\11\0\2\3\3\0"+
    "\6\3\1\0\1\3\24\0\11\3\1\0\20\3\1\u014c"+
    "\56\0\1\u014d\37\0\2\72\3\0\6\72\1\0\1\72"+
    "\24\0\1\77\1\u014e\7\72\1\0\21\72\11\0\2\3"+
    "\3\0\6\3\1\0\1\3\24\0\10\3\1\u014f\1\0"+
    "\21\3\53\0\1\u0150\42\0\2\72\3\0\6\72\1\0"+
    "\1\72\24\0\1\77\7\72\1\u0151\1\0\21\72\11\0"+
    "\2\3\3\0\6\3\1\0\1\3\24\0\11\3\1\0"+
    "\11\3\1\u0152\7\3\62\0\1\u0153\33\0\2\72\3\0"+
    "\6\72\1\0\1\72\24\0\1\77\3\72\1\u0154\4\72"+
    "\1\0\21\72\56\0\1\u0155\37\0\2\72\3\0\6\72"+
    "\1\0\1\72\24\0\1\77\1\u0156\7\72\1\0\21\72"+
    "\53\0\1\u0157\42\0\2\72\3\0\6\72\1\0\1\72"+
    "\1\0\2\u0158\21\0\1\77\10\72\1\0\21\72\27\0"+
    "\2\u0158\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\7\1\2\11\4\1\1\11"+
    "\1\1\3\11\21\1\4\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\2\11\6\0\11\11\15\1"+
    "\1\0\1\11\33\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\0\1\1\3\0\20\1\1\0\35\1\2\11"+
    "\1\1\3\0\55\1\1\11\2\0\42\1\2\0\31\1"+
    "\2\0\20\1\2\0\12\1\2\0\7\1\2\0\4\1"+
    "\2\0\1\1\2\0\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuilder string = new StringBuilder();
	public static String curLine;

	private Symbol symbol(int type) {
		return new JavaSymbol(type, yyline+1, yycolumn+1);
	}
	
	private Symbol symbol(int type, Object value) {
		return new JavaSymbol(type, yyline+1, yycolumn+1, value);
	}
  
	private long parseLong(int start, int end, int radix) {
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
			digit  = Character.digit(yycharat(i),radix);
			result *= radix;
			result += digit;
		}
		return result;
	}

	/* Mensagem de erro lexico em uma dada linha */
	private void reportError(int line, String msg) {
		throw new RuntimeException("Erro lexico na linha" + line + ": " + msg);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
            }
          case 110: break;
          case 2: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 111: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 112: break;
          case 4: 
            { /* ignore */
            }
          case 113: break;
          case 5: 
            { return symbol(sym.DOT);
            }
          case 114: break;
          case 6: 
            { return symbol(sym.MINUS);
            }
          case 115: break;
          case 7: 
            { return symbol(sym.CHARLITERAL);
            }
          case 116: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 117: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 118: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 119: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 120: break;
          case 12: 
            { return symbol(sym.NOT);
            }
          case 121: break;
          case 13: 
            { return symbol(sym.MOD);
            }
          case 122: break;
          case 14: 
            { return symbol(sym.AND);
            }
          case 123: break;
          case 15: 
            { return symbol(sym.EQ);
            }
          case 124: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 125: break;
          case 17: 
            { return symbol(sym.XOR);
            }
          case 126: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 127: break;
          case 19: 
            { return symbol(sym.LPAREN);
            }
          case 128: break;
          case 20: 
            { return symbol(sym.RPAREN);
            }
          case 129: break;
          case 21: 
            { return symbol(sym.DIV);
            }
          case 130: break;
          case 22: 
            { return symbol(sym.LBRACE);
            }
          case 131: break;
          case 23: 
            { return symbol(sym.RBRACE);
            }
          case 132: break;
          case 24: 
            { return symbol(sym.SEMICOLON);
            }
          case 133: break;
          case 25: 
            { return symbol(sym.COMMA);
            }
          case 134: break;
          case 26: 
            { return symbol(sym.LT);
            }
          case 135: break;
          case 27: 
            { return symbol(sym.GT);
            }
          case 136: break;
          case 28: 
            { return symbol(sym.COMP);
            }
          case 137: break;
          case 29: 
            { return symbol(sym.OR);
            }
          case 138: break;
          case 30: 
            { return symbol(sym.FLOAT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 139: break;
          case 31: 
            { return symbol(sym.FLOAT_LITERAL, new Double(yytext()));
            }
          case 140: break;
          case 32: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
            }
          case 141: break;
          case 33: 
            { return symbol(sym.MINUSMINUS);
            }
          case 142: break;
          case 34: 
            { return symbol(sym.PLUSEQ);
            }
          case 143: break;
          case 35: 
            { return symbol(sym.MULTEQ);
            }
          case 144: break;
          case 36: 
            { return symbol(sym.PLUSPLUS);
            }
          case 145: break;
          case 37: 
            { return symbol(sym.MINUSEQ);
            }
          case 146: break;
          case 38: 
            { return symbol(sym.NOTEQ);
            }
          case 147: break;
          case 39: 
            { return symbol(sym.MODEQ);
            }
          case 148: break;
          case 40: 
            { return symbol(sym.ANDAND);
            }
          case 149: break;
          case 41: 
            { return symbol(sym.ANDEQ);
            }
          case 150: break;
          case 42: 
            { return symbol(sym.EQEQ);
            }
          case 151: break;
          case 43: 
            { return symbol(sym.XOREQ);
            }
          case 152: break;
          case 44: 
            { return symbol(sym.IF);
            }
          case 153: break;
          case 45: 
            { return symbol(sym.DIVEQ);
            }
          case 154: break;
          case 46: 
            { return symbol(sym.DO);
            }
          case 155: break;
          case 47: 
            { return symbol(sym.LTEQ);
            }
          case 156: break;
          case 48: 
            { return symbol(sym.LSHIFT);
            }
          case 157: break;
          case 49: 
            { return symbol(sym.GTEQ);
            }
          case 158: break;
          case 50: 
            { return symbol(sym.RSHIFT);
            }
          case 159: break;
          case 51: 
            { return symbol(sym.OREQ);
            }
          case 160: break;
          case 52: 
            { return symbol(sym.OROR);
            }
          case 161: break;
          case 53: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
            }
          case 162: break;
          case 54: 
            { return symbol(sym.TRY);
            }
          case 163: break;
          case 55: 
            { return symbol(sym.INT);
            }
          case 164: break;
          case 56: 
            { return symbol(sym.NEW);
            }
          case 165: break;
          case 57: 
            { return symbol(sym.FOR);
            }
          case 166: break;
          case 58: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 167: break;
          case 59: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 168: break;
          case 60: 
            { return symbol(sym.URSHIFT);
            }
          case 169: break;
          case 61: 
            { return symbol(sym.BOOLEAN_LITERAL, Boolean.TRUE);
            }
          case 170: break;
          case 62: 
            { return symbol(sym.THIS);
            }
          case 171: break;
          case 63: 
            { return symbol(sym.NULL);
            }
          case 172: break;
          case 64: 
            { return symbol(sym.GOTO);
            }
          case 173: break;
          case 65: 
            { return symbol(sym.ENUM);
            }
          case 174: break;
          case 66: 
            { return symbol(sym.ELSE);
            }
          case 175: break;
          case 67: 
            { return symbol(sym.BYTE);
            }
          case 176: break;
          case 68: 
            { return symbol(sym.CASE);
            }
          case 177: break;
          case 69: 
            { return symbol(sym.CHAR);
            }
          case 178: break;
          case 70: 
            { return symbol(sym.LONG);
            }
          case 179: break;
          case 71: 
            { return symbol(sym.VOID);
            }
          case 180: break;
          case 72: 
            { return symbol(sym.URSHIFTEQ);
            }
          case 181: break;
          case 73: 
            { return symbol(sym.THROW);
            }
          case 182: break;
          case 74: 
            { return symbol(sym.BREAK);
            }
          case 183: break;
          case 75: 
            { return symbol(sym.SHORT);
            }
          case 184: break;
          case 76: 
            { return symbol(sym.SUPER);
            }
          case 185: break;
          case 77: 
            { return symbol(sym.CONST);
            }
          case 186: break;
          case 78: 
            { return symbol(sym.CATCH);
            }
          case 187: break;
          case 79: 
            { return symbol(sym.CLASS);
            }
          case 188: break;
          case 80: 
            { return symbol(sym.FINAL);
            }
          case 189: break;
          case 81: 
            { return symbol(sym.BOOLEAN_LITERAL, Boolean.FALSE);
            }
          case 190: break;
          case 82: 
            { return symbol(sym.FLOAT);
            }
          case 191: break;
          case 83: 
            { return symbol(sym.WHILE);
            }
          case 192: break;
          case 84: 
            { return symbol(sym.THROWS);
            }
          case 193: break;
          case 85: 
            { return symbol(sym.RETURN);
            }
          case 194: break;
          case 86: 
            { return symbol(sym.IMPORT);
            }
          case 195: break;
          case 87: 
            { return symbol(sym.NATIVE);
            }
          case 196: break;
          case 88: 
            { return symbol(sym.ASSERT);
            }
          case 197: break;
          case 89: 
            { return symbol(sym.STATIC);
            }
          case 198: break;
          case 90: 
            { return symbol(sym.SWITCH);
            }
          case 199: break;
          case 91: 
            { return symbol(sym.DOUBLE);
            }
          case 200: break;
          case 92: 
            { return symbol(sym.PUBLIC);
            }
          case 201: break;
          case 93: 
            { return symbol(sym.EXTENDS);
            }
          case 202: break;
          case 94: 
            { return symbol(sym.BOOLEAN);
            }
          case 203: break;
          case 95: 
            { return symbol(sym.DEFAULT);
            }
          case 204: break;
          case 96: 
            { return symbol(sym.FINALLY);
            }
          case 205: break;
          case 97: 
            { return symbol(sym.PRIVATE);
            }
          case 206: break;
          case 98: 
            { return symbol(sym.PACKAGE);
            }
          case 207: break;
          case 99: 
            { return symbol(sym.ABSTRACT);
            }
          case 208: break;
          case 100: 
            { return symbol(sym.CONTINUE);
            }
          case 209: break;
          case 101: 
            { return symbol(sym.VOLATILE);
            }
          case 210: break;
          case 102: 
            { return symbol(sym.TRANSIENT);
            }
          case 211: break;
          case 103: 
            { return symbol(sym.INTERFACE);
            }
          case 212: break;
          case 104: 
            { return symbol(sym.PROTECTED);
            }
          case 213: break;
          case 105: 
            { return symbol(sym.THREADSAFE);
            }
          case 214: break;
          case 106: 
            { return symbol(sym.INSTANCEOF);
            }
          case 215: break;
          case 107: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 216: break;
          case 108: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 217: break;
          case 109: 
            { return symbol(sym.STRING_LITERAL, new String(yytext()));
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
